name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy pytest-cov
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint Python code
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        mypy .
    
    - name: Lint JavaScript/TypeScript code
      run: |
        cd frontend
        npm run lint
        npx tsc --noEmit
    
    - name: Security scan
      run: |
        cd backend
        pip install safety bandit
        safety check
        bandit -r . -f json -o security-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: backend/security-report.json

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1-dev
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run backend tests
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-${{ matrix.python-version }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml

  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-${{ matrix.node-version }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results-${{ matrix.node-version }}
        path: |
          frontend/coverage/
          frontend/test-results.xml

  # 构建测试
  build-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ../frontend
        npm ci
    
    - name: Build application
      run: |
        python build.py --build-type production --skip-tests
    
    - name: Test build artifacts
      run: |
        ls -la build/
        test -d build/backend
        test -d build/frontend
        test -d build/package
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/
        retention-days: 7

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: build-test
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1-dev
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/
    
    - name: Install dependencies
      run: |
        cd build/backend
        pip install -r requirements.txt
        pip install pytest requests
    
    - name: Start backend server
      run: |
        cd build/backend
        python main.py &
        sleep 10
      env:
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration/ -v
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/api/status

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install locust
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/
    
    - name: Start application
      run: |
        cd build/backend
        python main.py &
        sleep 15
      env:
        ENVIRONMENT: test
    
    - name: Run performance tests
      run: |
        cd backend
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:8000
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: |
          backend/locust_report.html
          backend/locust_stats.csv

  # 安全测试
  security-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Docker构建
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/local-music-generator:latest
          ${{ secrets.DOCKER_USERNAME }}/local-music-generator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Docker security scan
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/local-music-generator:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  # 部署到暂存环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 实际部署逻辑
        python deploy.py --environment staging --docker
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 烟雾测试逻辑
        python -m pytest tests/smoke/ -v
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Staging deployment completed for commit ${{ github.sha }}",
            attachments: [{
              color: 'good',
              fields: [{
                title: 'Environment',
                value: 'staging',
                short: true
              }, {
                title: 'Commit',
                value: '${{ github.sha }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-test, performance-test, security-test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 实际部署逻辑
        python deploy.py --environment production --docker --monitoring
    
    - name: Run health checks
      run: |
        echo "Running production health checks..."
        # 生产环境健康检查
        python health_check.py --environment production
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Production deployment completed for commit ${{ github.sha }}",
            attachments: [{
              color: 'good',
              fields: [{
                title: 'Environment',
                value: 'production',
                short: true
              }, {
                title: 'Commit',
                value: '${{ github.sha }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 创建GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/
    
    - name: Create distribution package
      run: |
        cd build/package
        tar -czf ../../local-music-generator-${{ github.sha }}.tar.gz .
    
    - name: Generate release notes
      run: |
        echo "# Release Notes" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes in this release:" >> RELEASE_NOTES.md
        git log --oneline $(git describe --tags --abbrev=0)..HEAD >> RELEASE_NOTES.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./local-music-generator-${{ github.sha }}.tar.gz
        asset_name: local-music-generator-${{ github.sha }}.tar.gz
        asset_content_type: application/gzip

  # 清理
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, create-release]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          build-artifacts
          security-report
          backend-test-results-*
          frontend-test-results-*
          performance-report
        failOnError: false
    
    - name: Notify completion
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "CI/CD pipeline completed for commit ${{ github.sha }}",
            attachments: [{
              color: '${{ job.status == "success" && "good" || "danger" }}',
              fields: [{
                title: 'Status',
                value: '${{ job.status }}',
                short: true
              }, {
                title: 'Commit',
                value: '${{ github.sha }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}